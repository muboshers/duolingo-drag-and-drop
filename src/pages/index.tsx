import Head from "next/head";
import { useState } from "react";
import {
  DndContext,
  DragOverlay,
  KeyboardSensor,
  PointerSensor,
  TouchSensor,
  useSensor,
  useSensors,
} from "@dnd-kit/core";
import { sortableKeyboardCoordinates } from "@dnd-kit/sortable";
import Droppable from "@/components/Dropable";
import { extractBracketWord, message, options } from "@/@mock/draggable";
import Draggable from "@/components/Draggable";
import { customWindow } from "@/utils/window";
import { restrictToWindowEdges } from "@dnd-kit/modifiers";

export default function Home() {
  const [activeElement, setActiveElement] = useState<any | null>(null);
  const [addedOptions, setAddedOptions] = useState<any | null>(null);

  const sensors = useSensors(
    useSensor(customWindow.innerWidth <= 768 ? TouchSensor : PointerSensor),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  );

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <DndContext
        sensors={sensors}
        onDragStart={(e) => {
          setActiveElement(e.active.data.current?.element);
          const option = e.active.data.current?.element?.option;
          if (!option) return;
          setAddedOptions([...(addedOptions ?? []), option]);
        }}
        onDragCancel={() => {
          setActiveElement(null);
        }}
        onDragEnd={(event) => {
          console.log(event);
        }}
      >
        <div className="container">
          <p>
            {extractBracketWord(message).map((item, index) => {
              if (item.match(/\[(.*?)\]/g)) {
                return (
                  <Droppable dropableIndex={index} key={index}>
                    <span className="dropable" />
                  </Droppable>
                );
              }
              return <span key={index}>{item}</span>;
            })}
          </p>
        </div>
        <div className="container">
          <div className="drag-overlay">
            {options.map((opt, index) => (
              <Draggable key={`option-${index}-${opt.option}`} option={opt} />
            ))}
          </div>
        </div>

        <DragOverlay modifiers={[restrictToWindowEdges]}>
          {activeElement && (
            <p className="drag-item" {...activeElement}>
              {activeElement.option}
            </p>
          )}
        </DragOverlay>
      </DndContext>
    </>
  );
}
